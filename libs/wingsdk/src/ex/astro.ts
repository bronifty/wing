import { isAbsolute, resolve } from "path";
import { Construct } from "constructs";
import { fqnForType } from "../constants";
import { App } from "../core";
import { Node, Resource } from "../std";

/**
 * Global identifier for `Astro`.
 */
export const ASTRO_FQN = fqnForType("ex.Astro");

/**
 * Options for `Astro`.
 */
export interface AstroProps {
  /**
   * Local path to the Astro's root directory, relative to the Wing source file or absolute.
   */
  readonly root: string;

  /**
   * The website's custom domain name.
   * @example "example.com"
   * @default - a domain is generated by the cloud provider
   */
  readonly domain?: string;
}

/**
 * A cloud static website.
 *
 * @inflight `@winglang/sdk.ex.IAstroClient`
 */
export abstract class Astro extends Resource {
  /**
   * Create a new website.
   * @internal
   */
  public static _newAstro(
    scope: Construct,
    id: string,
    props: AstroProps
  ): Astro {
    return App.of(scope).newAbstract(ASTRO_FQN, scope, id, props);
  }
  /** @internal */
  private readonly _root: string;

  /** @internal */
  protected _domain?: string;

  constructor(scope: Construct, id: string, props: AstroProps) {
    super(scope, id);

    Node.of(this).title = "Astro";
    Node.of(this).description = "An Astro website";

    if (isAbsolute(props.root)) {
      this._root = props.root;
    } else {
      if (!App.of(scope).entrypointDir) {
        throw new Error("Missing environment variable: WING_SOURCE_DIR");
      }
      this._root = resolve(App.of(scope).entrypointDir, props.root);
    }

    this._domain = props.domain;
  }

  // TODO: how do we annotate that the map is <string, any preflight value>?
  public abstract defineVirtualModule(
    name: string,
    values: Record<string, any>
  ): void;

  /** @internal */
  public _getInflightOps(): string[] {
    return [];
  }

  /**
   * Absolute path to the Astro project root.
   */
  public get root(): string {
    return this._root;
  }

  /**
   * The website's url.
   */
  public abstract get url(): string;
}

/**
 * Inflight methods and members of `cloud.Astro`.
 */
export interface IAstroClient {}
