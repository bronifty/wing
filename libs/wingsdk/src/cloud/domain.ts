import { Construct } from "constructs";
import { fqnForType } from "../constants";
import { Node, Resource } from "../std";
import { App } from "../core";

/**
 * Global identifier for `Domain`.
 */
export const DOMAIN_FQN = fqnForType("cloud.Domain");

/**
 * Options for `Domain`.
 */
export interface DomainProps {
  /**
   * The website's custom domain name.
   * @example "example.com"
   * @default - a domain is generated by the cloud provider
   */
  readonly domain?: string;
  /**
   * The website's sub domain name.
   * @example "www"
   * @default undefined
   */
  readonly subDomain?: string;
}

/**
 * A cloud Domain
 * 
 * @inflight - `@winglang/sdk.cloud.IDomainClient`
 */
export abstract class Domain extends Resource {
  /**
     * Create a new website.
     * @internal
     */
  public static _newDomain(
    scope: Construct,
    id: string,
    props: DomainProps
  ): Domain {
    return App.of(scope).newAbstract(DOMAIN_FQN, scope, id, props);
  }
  /** @internal */
  protected _domain?: string;

  /** @internal */
  protected _subDomain?: string;

  constructor(scope: Construct, id: string, props: DomainProps) {
    super(scope, id);

    Node.of(this).title = "Domain";
    Node.of(this).description = "A cloud domain";

    this._domain = props.domain;
    this._subDomain = props.subDomain;
  }

  /** @internal */
  public _getInflightOps(): string[] {
    return [];
  }

  /**
   * The domain value.
   */
  public get domain(): string | undefined {
    return this._domain;
  }

  /**
 * The sub domain value.
 */
  public get subDomain(): string | undefined {
    return this._subDomain;
  }
}
